extends layout


block content
    script.
        interact('.dragging_element')
                .draggable({
                    // enable inertial throwing
                    inertia: false,
                    // keep the element within the area of it's parent
                    restrict: {
                        restriction: "parent",
                        endOnly: true,
                        elementRect: {top: 0, left: 0, bottom: 0, right: 0}
                    },
                    // enable autoScroll
                    autoScroll: true,

                    // call this function on every dragmove event
                    onmove: dragMoveListener,
                    // call this function on every dragend event
                    onend: function (event) {
                        var textEl = event.target.querySelector('p');

                        textEl && (textEl.textContent =
                                'moved a distance of '
                                + (Math.sqrt(event.dx * event.dx +
                                        event.dy * event.dy) | 0) + 'px');
                    }
                });

        function dragMoveListener(event) {
            var target = event.target,
            // keep the dragged position in the data-x/data-y attributes
                    x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
                    y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

            // translate the element
            target.style.webkitTransform =
                    target.style.transform =
                            'translate(' + x + 'px, ' + y + 'px)';

            // update the posiion attributes
            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
        }

        // this is used later in the resizing and gesture demos
        window.dragMoveListener = dragMoveListener;
        var selected = null;

        $(document).on('click', '#add_text', function () {
            console.log("Adding Text");
            $('#droptarget').append('<p class="dragging_element">' + $('#text_input').val() + '</p>');
        });

        $(document).on('mouseenter', 'p.dragging_element, ul.dragging_element', function () {
            $(this).css('border-style', 'solid');
        });

        $(document).on('mouseleave', 'p.dragging_element, ul.dragging_element', function () {
            $(this).css('border-style', 'none');
        });

        $(document).on('click', 'p.dragging_element, ul.dragging_element, img.dragging_element', function () {
            selected = $(this);
        });

        $(document).on('click', '#delete', function () {
            selected.remove();
        });

        $(document).on('click', '#new', function () {
            $('#droptarget').children().remove();
        });

        $(document).on('click', '#add_bullet', function () {
            console.log("Adding bullet point");
            $('#droptarget').append('<ul class="dragging_element"><li>' + $('#bullet_input').val() + '</li></ul>');
        });

        $(document).on('click', '#save_slide', function () {
            var data = {
                slide_body: {
                    title: "Slide title",
                    texts: [],
                    bullets: [],
                    images: []
                }
            };

            var text_object = {
                text: null,
                x_pos: 0,
                y_pos: 0
            };

            var image_object = {
                image: null,
                x_pos: 0,
                y_pos: 0
            };

            $.each($('p.dragging_element'), function (index, value) {
                text_object.text = $(this).text();
                text_object.x_pos = $(this).css('transform').split(/[()]/)[1].split(',')[4];
                text_object.y_pos = $(this).css('transform').split(/[()]/)[1].split(',')[5];
                data.slide_body.texts.push(text_object);
            });

            $.each($('ul.dragging_element'), function (index, value) {
                text_object.text = $(this).text();
                text_object.x_pos = $(this).css('transform').split(/[()]/)[1].split(',')[4];
                text_object.y_pos = $(this).css('transform').split(/[()]/)[1].split(',')[5];
                data.slide_body.bullets.push(text_object);
            });

            /*$.each($('img.dragging_element'), function(index, value){
                var xhr = new XMLHttpRequest();
                xhr.open('GET', $(this).attr('src'), true);
                xhr.responseType = 'blob';
                xhr.onload = function(e){
                    if(this.status == 200){
                        var img_blob = this.response;
                        image_object.image = convert_to_base64(img_blob);
                        image_object.x_pos = $(this).css('transform').split(/[()]/)[1].split(',')[4];
                        image_object.y_pos = $(this).css('transform').split(/[()]/)[1].split(',')[5];
                    }
                }
            });*/

            $.ajax({
                type: "POST",
                url: "/slide/new",
                body: data
            });
        });


        var getBlobURL = (window.URL && URL.createObjectURL.bind(URL)) ||
                (window.webkitURL && webkitURL.createObjectURL.bind(webkitURL)) ||
                window.createObjectURL;
        var revokeBlobURL = (window.URL && URL.revokeObjectURL.bind(URL)) ||
                (window.webkitURL && webkitURL.revokeObjectURL.bind(webkitURL)) ||
                window.revokeObjectURL;

        // When the document is loaded, add event handlers to the droptarget element
        // so that it can handle drops of files
        window.onload = function () {
            // Find the element we want to add handlers to.
            var droptarget = document.getElementById("droptarget");

            // When the user starts dragging files over the droptarget, highlight it.
            droptarget.ondragenter = function (e) {
                // If the drag is something other than files, ignore it.
                // The HTML5 dropzone attribute will simplify this when implemented.
                var types = e.dataTransfer.types;
                if (!types ||
                        (types.contains && types.contains("Files")) ||
                        (types.indexOf && types.indexOf("Files") != -1)) {
                    droptarget.classList.add("active"); // Highlight droptarget
                    return false;                       // We're interested in the drag
                }
            };
            // Unhighlight the drop zone if the user moves out of it
            droptarget.ondragleave = function () {
                droptarget.classList.remove("active");
            };

            // This handler just tells the browser to keep sending notifications
            droptarget.ondragover = function (e) {
                return false;
            };

            // When the user drops files on us, get their URLs and display thumbnails.
            droptarget.ondrop = function (e) {
                var files = e.dataTransfer.files;            // The dropped files
                for (var i = 0; i < files.length; i++) {      // Loop through them all
                    var type = files[i].type;
                    if (type.substring(0, 6) !== "image/")    // Skip any nonimages
                        continue;
                    var img = document.createElement("img"); // Create an <img> element
                    img.src = getBlobURL(files[i]);          // Use Blob URL with <img>
                    img.className = "dragging_element";
                    img.onload = function () {                // When it loads
                        this.width = 100;                    // adjust its size and
                        $('#droptarget').append(this);     // insert into document.
                        revokeBlobURL(this.src);             // But don't leak memory!
                    }
                }

                droptarget.classList.remove("active");       // Unhighlight droptarget
                return false;                                // We've handled the drop
            }
        };

        function convert_to_base64(blob_to_convert){
            var base64 = null;
            var reader = new window.FileReader();
            reader.readAsDataURL(blob_to_convert);
            reader.onloadend = function(){
                base64data = reader.result;
                console.log(base64data);
                base64 = base64data;
            }
            return base64;
        }


    .container-fluid
        .row
            .col-lg-12
                h1.text-center PSS: Plus Sized Slides
        .row
            .col-lg-12
                #droptarget(style="height: 40em;")
                    //texts = slide_text
                //each text in texts
                    //span #{slide_text}
                //each image in slide_image
                    //.img-responsive
        .row
            .col-lg-12
                #draggable


        .row
            .col-lg-2.margin-offset-left
                #new.button.btn.btn-primary.btn-lg() New
            .col-lg-2
                #delete.button.btn.btn-danger.btn-lg() Delete
            .col-lg-2
                .button.btn.btn-primary.btn-lg(data-toggle="modal", data-target="#add_text_modal") Add Text
            .col-lg-2
                #add_b_text.button.btn.btn-primary.btn-lg(data-toggle="modal", data-target="#add_bullet_modal") Add Bulleted Text
            .col-lg-2
                #save_slide.button.btn.btn-primary.btn-lg() Save Slide




    .modal.fade(tabindex="-1" role="dialog" id="add_text_modal")
        .modal-dialog
            .modal-content
                .modal-header

                    button.close(type="button",data-dismiss="modal", aria-label="Close")
                    h4.modal-title Add Text

                .modal-body
                    input(type="text", name="text_input", id="text_input")

                .modal-footer
                    button.btn.btn-default(type="button", data-dismiss="modal") Close
                    button.btn.btn-primary(type="button", data-dismiss="modal", id="add_text") Save

    .modal.fade(tabindex="-1" role="dialog" id="add_bullet_modal")
        .modal-dialog
            .modal-content
                .modal-header

                    button.close(type="button",data-dismiss="modal", aria-label="Close")
                    h4.modal-title Add Bullet point

                .modal-body
                    input(type="text", name="text_input", id="bullet_input")

                .modal-footer
                    button.btn.btn-default(type="button", data-dismiss="modal") Close
                    button.btn.btn-primary(type="button", data-dismiss="modal", id="add_bullet") Save
